/* Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above notice and this permission notice shall be included in all copies
 * or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/* File for "Textures" lesson of the OpenGL tutorial on
 * www.videotutorialsrock.com
 */



#include <iostream>
#include <stdlib.h>

#ifdef __APPLE__
#include <OpenGL/OpenGL.h>
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif

#include "imageloader.h"

using namespace std;

float _angle = 0;            //The rotation of the box

void handleKeypress(unsigned char key, int x, int y) {
	switch (key) {
		case 27: //Escape key
			exit(0);
	}
}

//Makes the image into a texture, and returns the id of the texture
GLuint loadTexture(Image* image) {
	GLuint textureId;
	glGenTextures(1, &textureId); //Make room for our texture
	glBindTexture(GL_TEXTURE_2D, textureId); //Tell OpenGL which texture to edit
	//Map the image to the texture
	glTexImage2D(GL_TEXTURE_2D,                //Always GL_TEXTURE_2D
				 0,                            //0 for now
				 GL_RGB,                       //Format OpenGL uses for image
				 image->width, image->height,  //Width and height
				 0,                            //The border of the image
				 GL_RGB, //GL_RGB, because pixels are stored in RGB format
				 GL_UNSIGNED_BYTE, //GL_UNSIGNED_BYTE, because pixels are stored
				                   //as unsigned numbers
				 image->pixels);               //The actual pixel data
	return textureId; //Returns the id of the texture
}

GLuint _textureId; //The id of the texture

void initRendering() {
	glEnable(GL_DEPTH_TEST);
	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	glEnable(GL_NORMALIZE);
	glEnable(GL_COLOR_MATERIAL);
	glShadeModel(GL_SMOOTH); //Enable smooth shading
	
	Image* image = loadBMP("leftBreast2.bmp");
	_textureId = loadTexture(image);
	delete image;
}

void handleResize(int w, int h) {
	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(45.0, (float)w / (float)h, 1.0, 200.0);
}

//enum position {ULUL, ULUR, ULBL, ULBR};

/*int getPos(string Pos) {
	if (Pos == "ULUL") return 1;
	if (Pos == "ULUR") return 2;
	if (Pos == "ULBL") return 3;
	if (Pos == "ULBR") return 4;
}*/

float *point1;// = -2.5f;
float point1_1 = -2.5f;
float *point2;// = -0.5f;
float point2_1 = -0.5f;
float *point3;// = -4.5f;
float point3_1 = -4.5f;


void createPointerVert() {
	point1 = &point1_1;
	point2 = &point2_1;
	point3 = &point3_1;
	cout << *point1;
	cout << "\n\r";

	glVertex3f(*point1, *point2, *point3);
}

void createTexMap(string Pos) {

	float adjuster1 = 1.0, adjuster2 = 1.0;

	if (Pos == "ULUL") {
		glTexCoord2f(0.00f*adjuster1, 0.660f*adjuster2);
	}
	if (Pos == "ULUR") {
		glTexCoord2f(0.3300f*adjuster1, 0.660f*adjuster2);
	}
	if (Pos == "ULBL") {
		glTexCoord2f(0.3300f*adjuster1, 1.00f*adjuster2);
	}
	if (Pos == "ULBR") {
		glTexCoord2f(0.00f*adjuster1, 1.00f*adjuster2);
	}
	if (Pos == "UMUL") {
		glTexCoord2f(0.3300f*adjuster1, 0.660f*adjuster2);
	}
	if (Pos == "UMUR") {
		glTexCoord2f(0.6600f*adjuster1, 0.660f*adjuster2);
	}
	if (Pos == "UMBL") {
		glTexCoord2f(0.6600f*adjuster1, 1.00f*adjuster2);
	}
	if (Pos == "UMBR") {
		glTexCoord2f(0.3300f*adjuster1, 1.00f*adjuster2);
	}
	if (Pos == "URUL") {
		glTexCoord2f(0.660f*adjuster1, 0.660f*adjuster2);
	}
	if (Pos == "URUR") {
		glTexCoord2f(1.00f*adjuster1, 0.660f*adjuster2);
	}
	if (Pos == "URBL") {
		glTexCoord2f(1.00f*adjuster1, 1.00f*adjuster2);
	}
	if (Pos == "URBR") {
		glTexCoord2f(0.660f*adjuster1, 1.00f*adjuster2);
	}

	if (Pos == "MLUL") {
		glTexCoord2f(0.00f*adjuster1, 0.330f*adjuster2);
	}
	if (Pos == "MLUR") {
		glTexCoord2f(0.3300f*adjuster1, 0.330f*adjuster2);
	}
	if (Pos == "MLBL") {
		glTexCoord2f(0.3300f*adjuster1, 0.6600f*adjuster2);
	}
	if (Pos == "MLBR") {
		glTexCoord2f(0.00f*adjuster1, 0.6600f*adjuster2);
	}
	if (Pos == "MMUL") {
		glTexCoord2f(0.3300f*adjuster1, 0.330f*adjuster2);
	}
	if (Pos == "MMUR") {
		glTexCoord2f(0.6600f*adjuster1, 0.330f*adjuster2);
	}
	if (Pos == "MMBL") {
		glTexCoord2f(0.6600f*adjuster1, 0.6600f*adjuster2);
	}
	if (Pos == "MMBR") {
		glTexCoord2f(0.3300f*adjuster1, 0.6600f*adjuster2);
	}
	if (Pos == "MRUL") {
		glTexCoord2f(0.660f*adjuster1, 0.330f*adjuster2);
	}
	if (Pos == "MRUR") {
		glTexCoord2f(1.00f*adjuster1, 0.330f*adjuster2);
	}
	if (Pos == "MRBL") {
		glTexCoord2f(1.00f*adjuster1, 0.6600f*adjuster2);
	}
	if (Pos == "MRBR") {
		glTexCoord2f(0.660f*adjuster1, 0.6600f*adjuster2);
	}

	if (Pos == "BLUL") {
		glTexCoord2f(0.00f*adjuster1, 0.0f*adjuster2);
	}
	if (Pos == "BLUR") {
		glTexCoord2f(0.3300f*adjuster1, 0.0f*adjuster2);
	}
	if (Pos == "BLBL") {
		glTexCoord2f(0.3300f*adjuster1, 0.3300f*adjuster2);
	}
	if (Pos == "BLBR") {
		glTexCoord2f(0.00f*adjuster1, 0.3300f*adjuster2);
	}
	if (Pos == "BMUL") {
		glTexCoord2f(0.3300f*adjuster1, 0.0f*adjuster2);
	}
	if (Pos == "BMUR") {
		glTexCoord2f(0.6600f*adjuster1, 0.0f*adjuster2);
	}
	if (Pos == "BMBL") {
		glTexCoord2f(0.6600f*adjuster1, 0.3300f*adjuster2);
	}
	if (Pos == "BMBR") {
		glTexCoord2f(0.3300f*adjuster1, 0.3300f*adjuster2);
	}
	if (Pos == "BRUL") {
		glTexCoord2f(0.660f*adjuster1, 0.0f*adjuster2);
	}
	if (Pos == "BRUR") {
		glTexCoord2f(1.00f*adjuster1, 0.0f*adjuster2);
	}
	if (Pos == "BRBL") {
		glTexCoord2f(1.00f*adjuster1, 0.3300f*adjuster2);
	}
	if (Pos == "BRBR") {
		glTexCoord2f(0.660f*adjuster1, 0.3300f*adjuster2);
	}
}

float *ULVer[3], *URVer[3], *BRVer[3], *BLVer[3];
float *ULTex[2], *URTex[2], *BRTex[2], *BLTex[2];
float ULVerInst[3] = {-2.5f, -0.5f, -4.5f}; float URVerInst[3] = {-1.0f, -0.5f, -1.5f}; float BLVerInst[3] = {-1.0f, 1.5f, -4.5f}; float BRVerInst[3] = {-2.5f, 1.5f, -4.5f};
float ULTexInst[2] = {0.0f,0.66f}; float URTexInst[2] = {0.330f,0.66f}; float BLTexInst[2] = {0.330f,1.00f}; float BRTexInst[2] = {0.0f,1.00f};

void createMesh(float ULVer[3], float ULTex[2], float URVer[3], float URTex[2], float BLVer[3], float BLTex[2], float BRVer[3], float BRTex[2]) {
	//float ULVer2[3] = {2.0f,3.0f,4.0f};
	//ULVer2[] = {2.0f,3.0f,4.0f};
	glTexCoord2f(ULTex[0], ULTex[1]);
	glVertex3f(ULVer[0], ULVer[1], ULVer[2]);
	glTexCoord2f(URTex[0], URTex[1]);
	glVertex3f(URVer[0], URVer[1], URVer[2]);
	glTexCoord2f(BLTex[0], BLTex[1]);
	glVertex3f(BLVer[0], BLVer[1], BLVer[2]);
	glTexCoord2f(BRTex[0], BRTex[1]);
	glVertex3f(BRVer[0], BRVer[1], BRVer[2]);
}


void drawScene() {
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	
	glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
	
	glTranslatef(0.0f, 1.0f, -6.0f);
	
	GLfloat ambientLight[] = {0.2f, 0.2f, 0.2f, 1.0f};
	glLightModelfv(GL_LIGHT_MODEL_AMBIENT, ambientLight);
	
	GLfloat directedLight[] = {0.7f, 0.7f, 0.7f, 1.0f};
	GLfloat directedLightPos[] = {-10.0f, 15.0f, 20.0f, 0.0f};
	glLightfv(GL_LIGHT0, GL_DIFFUSE, directedLight);
	glLightfv(GL_LIGHT0, GL_POSITION, directedLightPos);
	
	glRotatef(-_angle, -0.20f, 1.0f, 0.0f);

	glEnable(GL_TEXTURE_2D);
	glBindTexture(GL_TEXTURE_2D, _textureId);
	
	//Bottom
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
	//glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	//glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	glColor3f(1.0f, 1.0f, 1.0f);
	glBegin(GL_QUADS);
	
	glNormal3f(1.0f, 1.0f, 1.0f);

	ULVer = &{ULVerInst[0],ULVerInst[1],ULVerInst[2]};
	//URVer = &URVerInst; BLVer = &BLVerInst; BRVer = &BRVerInst;
	ULTex = &ULTexInst; URTex = &URTexInst; BLTex = &BLTexInst; BRTex = &BRTexInst;

	createMesh(ULVer,ULTex,URVer,URTex,BLVer,BLTex,BRVer,BRTex);
	/*if (Pos == "ULUL") {
		glTexCoord2f(0.00f*adjuster1, 0.660f*adjuster2);
	}
	if (Pos == "ULUR") {
		glTexCoord2f(0.3300f*adjuster1, 0.660f*adjuster2);
	}
	if (Pos == "ULBL") {
		glTexCoord2f(0.3300f*adjuster1, 1.00f*adjuster2);
	}
	if (Pos == "ULBR") {
		glTexCoord2f(0.00f*adjuster1, 1.00f*adjuster2);*/

	/*glTexCoord2f(0.0f, 0.0f);
	createTexMap("ULUL");
	//glVertex3f(-2.5f, -0.5f, -4.5f);
	createPointerVert();
	glTexCoord2f(1.0f, 0.0f);
	createTexMap("ULUR");
	glVertex3f(-1.0f, -0.5f, -1.5f);
	glTexCoord2f(1.0f, 1.0f);
	createTexMap("ULBL");
	glVertex3f(-1.0f, 1.5f, -4.5f);
	//glTexCoord2f(0.0f, 1.0f);
	createTexMap("ULBR");
	glVertex3f(-2.5f, 1.5f, -4.5f);*/

	createTexMap("UMUL");
    glVertex3f(-1.0f, -0.5f, -1.5f);
    createTexMap("UMUR");
    glVertex3f(1.0f, -0.5f, -1.5f);
    createTexMap("UMBL");
    glVertex3f(1.0f, 1.5f, -4.5f);
    createTexMap("UMBR");
    glVertex3f(-1.0f, 1.5f, -4.5f);

    createTexMap("URUL");
	glVertex3f(1.0f, -0.5f, -1.5f);
	createTexMap("URUR");
	glVertex3f(2.5f, -0.5f, -4.5f);
	createTexMap("URBL");
	glVertex3f(2.5f, 1.5f, -4.5f);
	createTexMap("URBR");
	glVertex3f(1.0f, 1.5f, -4.5f);

	createTexMap("MLUL");
	glVertex3f(-2.5f, -2.5f, -4.5f);
	createTexMap("MLUR");
	glVertex3f(-1.0f, -2.5f, -1.5f);
	createTexMap("MLBL");
	glVertex3f(-1.0f, -0.5f, -1.5f);
	createTexMap("MLBR");
	glVertex3f(-2.5f, -0.5f, -4.5f);

	createTexMap("MMUL");
    glVertex3f(-1.0f, -2.5f, -1.5f);
    createTexMap("MMUR");
    glVertex3f(1.0f, -2.5f, -1.5f);
    createTexMap("MMBL");
    glVertex3f(1.0f, -0.5f, -1.5f);
    createTexMap("MMBR");
    glVertex3f(-1.0f, -0.5f, -1.5f);

    createTexMap("MRUL");
	glVertex3f(1.0f, -2.5f, -1.5f);
	createTexMap("MRUR");
	glVertex3f(2.5f, -2.5f, -4.5f);
	createTexMap("MRBL");
	glVertex3f(2.5f, -0.5f, -4.5f);
	createTexMap("MRBR");
	glVertex3f(1.0f, -0.5f, -1.5f);

	createTexMap("BLUL");
	glVertex3f(-2.5f, -4.5f, -4.5f);
	createTexMap("BLUR");
	glVertex3f(-1.0f, -4.5f, -4.5f);
	createTexMap("BLBL");
	glVertex3f(-1.0f, -2.5f, -1.5f);
	createTexMap("BLBR");
	glVertex3f(-2.5f, -2.5f, -4.5f);

	createTexMap("BMUL");
    glVertex3f(-1.0f, -4.5f, -4.5f);
    createTexMap("BMUR");
    glVertex3f(1.0f, -4.5f, -4.5f);
    createTexMap("BMBL");
    glVertex3f(1.0f, -2.5f, -1.5f);
    createTexMap("BMBR");
    glVertex3f(-1.0f, -2.5f, -1.5f);

    createTexMap("BRUL");
	glVertex3f(1.0f, -4.5f, -4.5f);
	createTexMap("BRUR");
	glVertex3f(2.5f, -4.5f, -4.5f);
	createTexMap("BRBL");
	glVertex3f(2.5f, -2.5f, -4.5f);
	createTexMap("BRBR");
	glVertex3f(1.0f, -2.5f, -1.5f);

	glEnd();

	//glBegin(GL_QUADS);

	/*glNormal3f(0.0, 1.0f, 8.5f);
	glTexCoord2f(0.0f, 0.0f);
	glVertex3f(0.0f, -2.5f, -1.5f);
	glTexCoord2f(1.0f, 0.0f);
	glVertex3f(2.5f, -2.5f, -2.5f);
	glTexCoord2f(1.0f, 1.0f);
	glVertex3f(2.5f, -0.5f, -2.5f);
	glTexCoord2f(0.0f, 1.0f);
	glVertex3f(0.0f, -0.5f, -1.5f);*/

	//glEnd();
	
	glutSwapBuffers();
}

//Called every 25 milliseconds
void update(int value) {
	_angle += 0.330f;
	if (_angle > 0) {
		_angle -= 50;
	}

	point1_1 = _angle;
	point2_1 = -0.5f;
	point3_1 = -4.5f;

	point1 = &point1_1;
	point2 = &point2_1;
	point3 = &point3_1;

	//glutDisplayFunc(drawScene);

	glutPostRedisplay();
	glutTimerFunc(25, update, 0);
}

int main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
	glutInitWindowSize(400, 400);
	
	glutCreateWindow("Textures - videotutorialsrock.com");
	initRendering();
	
	glutDisplayFunc(drawScene);
	glutKeyboardFunc(handleKeypress);
	glutReshapeFunc(handleResize);
	glutTimerFunc(25, update, 0);
	
	glutMainLoop();
	return 0;
}









