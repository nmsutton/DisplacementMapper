/* Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above notice and this permission notice shall be included in all copies
 * or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/* File for "Textures" lesson of the OpenGL tutorial on
 * www.videotutorialsrock.com
 */

#include <opencv2/core/core.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/highgui/highgui.hpp>

#include <iostream>
#include <stdlib.h>

#ifdef __APPLE__
#include <OpenGL/OpenGL.h>
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif

#include "imageloader.h"
using namespace cv;

using namespace std;

float _angle = 0;            //The rotation of the box

void handleKeypress(unsigned char key, int x, int y) {
	switch (key) {
	case 27: //Escape key
		exit(0);
	}
}
String image1 = "/home/nmsutton/Documents/Software/OpenGL/Media/GeneralProcessed90.bmp";
String image2 = "/home/nmsutton/Documents/Software/OpenGL/Media/GeneralProcessed90UpSft.bmp";
String startingDispMapImage = image2;
String endingDispMapImage = image1;
Mat startingDispMap;
Mat endingDispMap;
double timeInMs = 0;

const int incrementValue = 1;

// *2 is due to 2 rectangle verticies for each x and y axis used for the later Z level mapping.
double verticiesInRectangle = 2;
const double sizeOfMesh = 10;//6;//50;
double sizeOfMesh2 = sizeOfMesh*2;
double texYScaling = 2*.9;
double texXScaling = 1.5*.9;
int x = 0, y = 0;
const double expandMeshSize = 2.0;//2.5;
float initalZ = 40.0f;
double depthScalingFactor = .7;//.025;//.3;//0.1;
const int xAmount = ceil(sizeOfMesh*expandMeshSize*(1/incrementValue))*2, yAmount = ceil(sizeOfMesh*(1/incrementValue))*2;
double startingVerZLevels[yAmount][xAmount] = {0};
double endingVerZLevels[yAmount][xAmount] = {0};
double animationDelay = 50.0;
struct vertsAndTextures { float ULVerInst[3]; float URVerInst[3]; float BLVerInst[3]; float BRVerInst[3];
float ULTexInst[2]; float URTexInst[2]; float BLTexInst[2]; float BRTexInst[2];};
vertsAndTextures vAT3;

//Makes the image into a texture, and returns the id of the texture
GLuint loadTexture(Image* image) {
	//dispMapImage = imread(imageName6, CV_LOAD_IMAGE_COLOR);

	GLuint textureId;
	glGenTextures(1, &textureId); //Make room for our texture
	glBindTexture(GL_TEXTURE_2D, textureId); //Tell OpenGL which texture to edit
	//Map the image to the texture
	glTexImage2D(GL_TEXTURE_2D,                //Always GL_TEXTURE_2D
			0,                            //0 for now
			GL_RGB,                       //Format OpenGL uses for image
			image->width, image->height,  //Width and height
			0,                            //The border of the image
			GL_RGB, //GL_RGB, because pixels are stored in RGB format
			GL_UNSIGNED_BYTE, //GL_UNSIGNED_BYTE, because pixels are stored
			//as unsigned numbers
			image->pixels);               //The actual pixel data
	return textureId; //Returns the id of the texture
}

GLuint _textureId; //The id of the texture

void initRendering() {
	glEnable(GL_DEPTH_TEST);
	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	glEnable(GL_NORMALIZE);
	glEnable(GL_COLOR_MATERIAL);
	glShadeModel(GL_SMOOTH); //Enable smooth shading

	Image* image = loadBMP("/home/nmsutton/Documents/Software/OpenGL/Media/generalImg3.bmp");
	_textureId = loadTexture(image);
	delete image;
}

void handleResize(int w, int h) {
	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(45.0, (float)w / (float)h, 1.0, 200.0);
}

void createMesh(vertsAndTextures vAT) {
	glTexCoord2f(vAT.ULTexInst[0], vAT.ULTexInst[1]);
	glVertex3f(vAT.ULVerInst[0],vAT.ULVerInst[1],vAT.ULVerInst[2]);
	glTexCoord2f(vAT.URTexInst[0], vAT.URTexInst[1]);
	glVertex3f(vAT.URVerInst[0],vAT.URVerInst[1],vAT.URVerInst[2]);
	glTexCoord2f(vAT.BLTexInst[0], vAT.BLTexInst[1]);
	glVertex3f(vAT.BLVerInst[0],vAT.BLVerInst[1],vAT.BLVerInst[2]);
	glTexCoord2f(vAT.BRTexInst[0], vAT.BRTexInst[1]);
	glVertex3f(vAT.BRVerInst[0],vAT.BRVerInst[1],vAT.BRVerInst[2]);
}

void buildDispMap(Mat startingDispMap, string startingOrEndPoint) {
	double verZLevels[yAmount][xAmount] = {0};
	for (int y = 0; y < yAmount; y += 2) {
		for (int x = 0; x < xAmount; x += 2) {
			double imageToScenePixelDiff = (255/(double)sizeOfMesh)*(1/verticiesInRectangle);
			//double translatedX = x * imageToScenePixelDiff; double translatedY = y * imageToScenePixelDiff;
			double translatedX = ceil(x * imageToScenePixelDiff); double translatedY = ceil(y * imageToScenePixelDiff);
			////cout << "translatedX\t";cout<<translatedX;cout<<"\ttranslatedY\t";cout<<translatedY;cout<<"\n";
			//double nextTranslatedX = (x+incrementValue) * imageToScenePixelDiff; double nextTranslatedY = (y+incrementValue) * imageToScenePixelDiff;
			//double priorTranslatedX = (x-incrementValue) * imageToScenePixelDiff; double priorTranslatedY = (y-incrementValue) * imageToScenePixelDiff;
			double meshVec_0_0_b = startingDispMap.at<Vec3b>((int)translatedY,(int)translatedX).val[0];
			//meshVec_0_0_b = meshVec_0_0_b/3;
			meshVec_0_0_b = meshVec_0_0_b/4;

			//cout<<"\ny: ";cout<<y;cout<<" x: ";cout<<x;cout<<"\n";

			////cout<<"[y+1][x+1]\t";cout<<x+1;cout<<" ";cout<<y+1;cout<<" ";cout<<" meshVec_0_0 ";cout<<meshVec_0_0_b;cout<<"\n";
			if (x < xAmount) {
				verZLevels[y][x] = meshVec_0_0_b;
			}
			if (x > 0) {
				verZLevels[y][x+1] = meshVec_0_0_b;
			}
			if ((y < yAmount) & (x < xAmount)) {
				verZLevels[y+1][x+1] = meshVec_0_0_b;
			}
			if (y > 0) {
				verZLevels[y+1][x] = meshVec_0_0_b;
			}
		}
	}

	if (startingOrEndPoint == "start") {
		//startingVerZLevels = verZLevels;
		copy(verZLevels[0], verZLevels[yAmount], startingVerZLevels[0]);
	}
	else if (startingOrEndPoint == "end") {
		//endingVerZLevels = verZLevels;
		copy(verZLevels[0], verZLevels[yAmount], endingVerZLevels[0]);
	};
}

void drawScene() {
	startingDispMap = imread(startingDispMapImage, CV_LOAD_IMAGE_COLOR);
	endingDispMap = imread(endingDispMapImage, CV_LOAD_IMAGE_COLOR);

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();

	// camera position mapper
	//glTranslatef(-30.0f, 1.0f, -60.0f);//-150.0f);
	glTranslatef(-25.0f, 11.0f, -90.0f);//-150.0f);

	//GLfloat ambientLight[] = {0.2f, 0.2f, 0.2f, 1.0f};
	GLfloat ambientLight[] = {200.2f, 200.2f, 200.2f, 1.0f};
	glLightModelfv(GL_LIGHT_MODEL_AMBIENT, ambientLight);

	GLfloat directedLight[] = {0.7f, 0.7f, 0.7f, 1.0f};
	GLfloat directedLightPos[] = {-10.0f, 15.0f, 20.0f, 0.0f};
	glLightfv(GL_LIGHT0, GL_DIFFUSE, directedLight);
	glLightfv(GL_LIGHT0, GL_POSITION, directedLightPos);

	glRotatef(-_angle, -0.20f, 1.0f, 0.0f);

	glEnable(GL_TEXTURE_2D);
	glBindTexture(GL_TEXTURE_2D, _textureId);

	//Bottom
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
	//glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	//glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	glColor3f(1.0f, 1.0f, 1.0f);
	glBegin(GL_QUADS);

	glNormal3f(1.0f, 1.0f, 1.0f);

	float verXIncrement = 1.5f;//0.5f;//1.5f;
	float verYIncrement = 1.5f;//2.0f;//0.5f;//2.0f;
	float verZIncrement = 1.0f;//3.5f;//0.5f;//3.5f;
	//float texXIncrement = 1.1*(1.00f/(sizeOfMesh*expandMeshSize));
	float texXIncrement = (1.07*(1.00f/(sizeOfMesh2*expandMeshSize)))/texXScaling;
	float texYIncrement = (1.00f/sizeOfMesh2)/texYScaling;

	float initVerXUL = -2.50f;
	float initVerXBR = -2.50f;
	float initVerXUR = initVerXUL+verXIncrement;
	float initVerXBL = initVerXBR+verXIncrement;
	float initTexXUL = 0.10f;//-0.05f;//0.0f;//
	float initTexXBR = 0.10f;//-0.05f;//-0.10f;
	float initTexXUR = initTexXUL+texXIncrement;
	float initTexXBL = initTexXBR+texXIncrement;
	float initTexYBR = 0.78f;//1.0f;//1.10f;
	float initTexYUL = initTexYBR-texYIncrement;
	float initTexYBL = 0.78f;//1.0f;//1.10f;
	float initTexYUR = initTexYBL-texYIncrement;
	float initVerZUL = -4.50f+initalZ;
	float initVerZUR = -4.50f+initalZ;//initVerZUL+verZIncrement;
	float initVerZBL = -4.50f+initalZ;
	float initVerZBR = -4.50f+initalZ;

	vAT3.ULVerInst[0] = -2.5f;
	vAT3.ULVerInst[1] = -0.5f;
	vAT3.ULVerInst[2] = -4.5f;
	vAT3.ULTexInst[0] = initTexXUL;
	vAT3.ULTexInst[1] = initTexYUL;

	vAT3.URVerInst[0] = -1.0f;
	vAT3.URVerInst[1] = -0.5f;
	vAT3.URVerInst[2] = -4.5f;//-1.5f;
	vAT3.URTexInst[0] = initTexXUR;
	vAT3.URTexInst[1] = initTexYUR;

	vAT3.BLVerInst[0] = -1.0f;
	vAT3.BLVerInst[1] = 1.5f;
	vAT3.BLVerInst[2] = -4.5f;
	vAT3.BLTexInst[0] = initTexXBL;
	vAT3.BLTexInst[1] = initTexYBL;

	vAT3.BRVerInst[0] = -2.5f;
	vAT3.BRVerInst[1] = 1.5f;
	vAT3.BRVerInst[2] = -4.5f;
	vAT3.BRTexInst[0] = initTexXBR;
	vAT3.BRTexInst[1] = initTexYBR;

	// Build displacement map.
	buildDispMap(startingDispMap, "start");
	buildDispMap(endingDispMap, "end");

	//cout << "yAmount\t";cout << yAmount;
	//cout<<"\txAmount\t";cout<<xAmount;
	//cout<<"\n";

	// print out section
	/*for (int y = 0; y < yAmount; y += 1) {
		for (x = 0; x < xAmount; x += 1) {
			double imageToScenePixelDiff = (255/(double)sizeOfMesh)*(1/verticiesInRectangle);
			double translatedX = ceil(x * imageToScenePixelDiff); double translatedY = ceil(y * imageToScenePixelDiff);
			double meshVec_0_0_b = dispMapImage.at<Vec3b>((int)translatedY,(int)translatedX).val[0];
			//cout<<"(";cout<<y;cout<<",";cout<<x;cout<<"):";
			cout<<"\t";cout<<meshVec_0_0_b;
		}
		cout<<"\n";
	}
	cout<<"_ _ _\n";*/

	int scalingF = 2;
	int incrementValue2 = 1;
	double maxYSize = sizeOfMesh*scalingF;
	double maxXSize = (sizeOfMesh*expandMeshSize*scalingF);
	for (y = 0; y < (maxYSize); y += incrementValue2) {
		//createMesh(vAT3);
		// Reinitialze X dimension before the x value loop
		vAT3.ULVerInst[0] = initVerXUL;
		vAT3.ULTexInst[0] = initTexXUL;
		vAT3.URVerInst[0] = initVerXUR;
		vAT3.URTexInst[0] = initTexXUR;
		vAT3.BLVerInst[0] = initVerXBL;
		vAT3.BLTexInst[0] = initTexXBL;
		vAT3.BRVerInst[0] = initVerXBR;
		vAT3.BRTexInst[0] = initTexXBR;

		//if (x==0 & y==0) {createMesh(vAT3);}

		// For y dimension iteration update the y values
		if (y < maxYSize/2) {
			vAT3.ULVerInst[1] -= verYIncrement;
			vAT3.URVerInst[1] -= verYIncrement;
			vAT3.BLVerInst[1] -= verYIncrement;
			vAT3.BRVerInst[1] -= verYIncrement;

			/*vAT3.ULVerInst[2] += verZIncrement;
			vAT3.URVerInst[2] += verZIncrement;
			vAT3.BLVerInst[2] += verZIncrement;
			vAT3.BRVerInst[2] += verZIncrement;*/

			vAT3.ULTexInst[1] -= texYIncrement;
			vAT3.URTexInst[1] -= texYIncrement;
			vAT3.BLTexInst[1] -= texYIncrement;
			vAT3.BRTexInst[1] -= texYIncrement;
		}
		else if (y >= maxYSize/2) {
			//cout<<"y greater";cout<<"\n";
			vAT3.ULVerInst[1] -= verYIncrement;
			vAT3.URVerInst[1] -= verYIncrement;
			vAT3.BLVerInst[1] -= verYIncrement;
			vAT3.BRVerInst[1] -= verYIncrement;

			/*vAT3.ULVerInst[2] -= verZIncrement;
			vAT3.URVerInst[2] -= verZIncrement;
			vAT3.BLVerInst[2] -= verZIncrement;
			vAT3.BRVerInst[2] -= verZIncrement;*/

			vAT3.ULTexInst[1] -= texYIncrement;
			vAT3.URTexInst[1] -= texYIncrement;
			vAT3.BLTexInst[1] -= texYIncrement;
			vAT3.BRTexInst[1] -= texYIncrement;
		}


		for (x = 0; x < maxXSize; x += incrementValue2) {
			if ((x < maxYSize/2) | (x < (maxYSize/2+(maxXSize-maxYSize)) & x > (maxXSize-maxYSize))) {
				vAT3.ULVerInst[0] += verXIncrement;
				vAT3.URVerInst[0] += verXIncrement;
				vAT3.BLVerInst[0] += verXIncrement;
				vAT3.BRVerInst[0] += verXIncrement;

				/*vAT3.ULVerInst[2] += verZIncrement;
				vAT3.URVerInst[2] += verZIncrement;			
				vAT3.BLVerInst[2] += verZIncrement;
				vAT3.BRVerInst[2] += verZIncrement;*/

				vAT3.ULTexInst[0] += texXIncrement;
				vAT3.URTexInst[0] += texXIncrement;
				vAT3.BLTexInst[0] += texXIncrement;
				vAT3.BRTexInst[0] += texXIncrement;
			}
			else if ((x >= maxYSize/2 & x < maxYSize) | (x > (maxYSize/2+(maxXSize-maxYSize)) & x < (maxXSize))) {
				//cout<<"x greater";cout<<"\n";
				vAT3.ULVerInst[0] += verXIncrement;
				vAT3.URVerInst[0] += verXIncrement;
				vAT3.BLVerInst[0] += verXIncrement;
				vAT3.BRVerInst[0] += verXIncrement;

				/*vAT3.ULVerInst[2] -= verZIncrement;
				vAT3.URVerInst[2] -= verZIncrement;
				vAT3.BLVerInst[2] -= verZIncrement;
				vAT3.BRVerInst[2] -= verZIncrement;*/

				vAT3.ULTexInst[0] += texXIncrement;
				vAT3.URTexInst[0] += texXIncrement;
				vAT3.BLTexInst[0] += texXIncrement;
				vAT3.BRTexInst[0] += texXIncrement;
			}
			else if (x > (maxYSize) & x < (maxXSize-maxYSize)) {
				vAT3.ULVerInst[0] += verXIncrement;
				vAT3.URVerInst[0] += verXIncrement;
				vAT3.BLVerInst[0] += verXIncrement;
				vAT3.BRVerInst[0] += verXIncrement;

				/*vAT3.ULVerInst[2] -= verZIncrement;
				vAT3.URVerInst[2] -= verZIncrement;			
				vAT3.BLVerInst[2] -= verZIncrement;
				vAT3.BRVerInst[2] -= verZIncrement;*/

				vAT3.ULTexInst[0] += texXIncrement;
				vAT3.URTexInst[0] += texXIncrement;
				vAT3.BLTexInst[0] += texXIncrement;
				vAT3.BRTexInst[0] += texXIncrement;
			}

			// Apply displacement map
			double imageToScenePixelDiff = 255/maxYSize;
			double translatedX = x * imageToScenePixelDiff; double translatedY = y * imageToScenePixelDiff;
			double nextTranslatedX = (x+incrementValue) * imageToScenePixelDiff; double nextTranslatedY = (y+incrementValue) * imageToScenePixelDiff;
			double priorTranslatedX = (x-incrementValue) * imageToScenePixelDiff; double priorTranslatedY = (y-incrementValue) * imageToScenePixelDiff;

			// Avoid edge problems
			double tempVal = 0;

			int x2 = x, y2 = y;
			double borderToCrop = 1;


			createMesh(vAT3);
		}
	}
	glEnd();

	glutSwapBuffers();
}

void applyDispMap() {
	//Use self organizing maps to apply disp map movement transition
	if (x2 < (maxXSize-borderToCrop)) {
		vAT3.BRVerInst[2] = ((startingVerZLevels[y2][x2]*depthScalingFactor)*(1.0-((1.0/animationDelay)*timeInMs))) + ((endingVerZLevels[y2][x2]*depthScalingFactor)*((1.0/animationDelay)*timeInMs));//verZLevels[y2][x2] = meshVec_0_0;
		//cout<<"timeInMs:\t";cout<<timeInMs;cout<<"\t(1-(1/50*timeInMs))\t";cout<<(double)(1.0-((1.0/50.0)*timeInMs));cout << "\tvAT3.BRVerInst[2]:\t";cout<<vAT3.BRVerInst[2];cout<<"\n";
	}
	if ((x2 > 0) & (x2 < (maxXSize-borderToCrop))) {
		vAT3.BLVerInst[2] = ((startingVerZLevels[y2][x2+1]*depthScalingFactor)*(1.0-((1.0/animationDelay)*timeInMs))) + ((endingVerZLevels[y2][x2+1]*depthScalingFactor)*((1.0/animationDelay)*timeInMs));//verZLevels[y2][x2+1] = meshVec_0_0;
	}
	if (y2 > 0 & y2 < maxYSize-borderToCrop) {
		vAT3.ULVerInst[2] = ((startingVerZLevels[y2+1][x2]*depthScalingFactor)*(1.0-((1.0/animationDelay)*timeInMs))) + ((endingVerZLevels[y2+1][x2]*depthScalingFactor)*((1.0/animationDelay)*timeInMs));// = meshVec_0_0;
	}
	if ((y2 < maxYSize-borderToCrop) & (x2 < (maxXSize-borderToCrop))) {
		vAT3.URVerInst[2] = ((startingVerZLevels[y2+1][x2+1]*depthScalingFactor)*(1.0-((1.0/animationDelay)*timeInMs))) + ((endingVerZLevels[y2+1][x2+1]*depthScalingFactor)*((1.0/animationDelay)*timeInMs));// = meshVec_0_0;
	}
}

//Called every 25 milliseconds
void update(int value) {
	timeInMs += 1.0;
	/*_angle += 1.0f;//0.1f;//0.330f;
	if (_angle > 50) {
		_angle -= 100;
	}*/
	if (timeInMs == animationDelay) {//25) {
		if (startingDispMapImage == image1) {
			startingDispMapImage = image2;
			endingDispMapImage = image1;
			cout << "switched\n";
		}
		else if (startingDispMapImage == image2) {
			startingDispMapImage = image1;
			endingDispMapImage = image2;
			cout << "switched back\n";
		}
		timeInMs = 0;
	}
	cout<<timeInMs;cout<<"\n";
	glutPostRedisplay();
	//glutTimerFunc(25, update, 0);
	glutTimerFunc(animationDelay, update, 0);
}

int main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
	glutInitWindowSize(400, 400);

	glutCreateWindow("Textures - videotutorialsrock.com");
	initRendering();

	glutDisplayFunc(drawScene);
	glutKeyboardFunc(handleKeypress);
	glutReshapeFunc(handleResize);
	_angle = -45.330f;//25.330f;
	//glutTimerFunc(25, update, 0);
	glutTimerFunc(animationDelay, update, 0);

	glutMainLoop();
	return 0;
}









